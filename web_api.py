import os
import time
import uuid
import asyncio
from astrbot.api.star import Context
from .services.document_service import DocumentService
from .services.kb_service import KnowledgeBaseService
from .config.settings import PluginSettings
from .vector_store.base import Document
from quart import request
from astrbot.dashboard.server import Response
from astrbot.core.utils.astrbot_path import get_astrbot_data_path
from astrbot import logger
from astrbot.core.config.default import VERSION


class KnowledgeBaseWebAPI:
    def __init__(
        self,
        kb_service: KnowledgeBaseService,
        document_service: DocumentService,
        astrbot_context: Context,
        plugin_config: PluginSettings,
    ):
        self.kb_service = kb_service
        self.document_service = document_service
        self.astrbot_context = astrbot_context
        self.plugin_config = plugin_config

        # ‰ªéÊúçÂä°‰∏≠Ëé∑Âèñ‰æùËµñ
        self.vec_db = self.kb_service.vector_db
        self.user_prefs_handler = self.kb_service.user_prefs_handler
        self.fp = self.document_service.file_parser
        self.text_splitter = self.document_service.text_splitter
        self.tasks = {}

        if VERSION < "3.5.13":
            raise RuntimeError("AstrBot ÁâàÊú¨Ëøá‰ΩéÔºåÊó†Ê≥ïÊîØÊåÅÊ≠§Êèí‰ª∂ÔºåËØ∑ÂçáÁ∫ß AstrBot„ÄÇ")

        self.astrbot_context.register_web_api(
            "/alkaid/kb/create_collection",
            self.create_collection,
            ["POST"],
            "ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÁü•ËØÜÂ∫ìÈõÜÂêà",
        )
        self.astrbot_context.register_web_api(
            "/alkaid/kb/collections",
            self.list_collections,
            ["GET"],
            "ÂàóÂá∫ÊâÄÊúâÁü•ËØÜÂ∫ìÈõÜÂêà",
        )
        self.astrbot_context.register_web_api(
            "/alkaid/kb/collection/add_file",
            self.add_documents,
            ["POST"],
            "ÂêëÊåáÂÆöÈõÜÂêàÊ∑ªÂä†ÊñáÊ°£",
        )
        self.astrbot_context.register_web_api(
            "/alkaid/kb/collection/search",
            self.search_documents,
            ["GET"],
            "ÊêúÁ¥¢ÊåáÂÆöÈõÜÂêà‰∏≠ÁöÑÊñáÊ°£",
        )
        self.astrbot_context.register_web_api(
            "/alkaid/kb/collection/delete",
            self.delete_collection,
            ["GET"],
            "Âà†Èô§ÊåáÂÆöÈõÜÂêà",
        )
        self.astrbot_context.register_web_api(
            "/alkaid/kb/task_status",
            self.get_task_status,
            ["GET"],
            "Ëé∑ÂèñÂºÇÊ≠•‰ªªÂä°ÁöÑÁä∂ÊÄÅ",
        )

    async def create_collection(self):
        """
        ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÁü•ËØÜÂ∫ìÈõÜÂêà„ÄÇ
        :param collection_name: ÈõÜÂêàÂêçÁß∞
        :return: ÂàõÂª∫ÁªìÊûú
        """
        data = await request.get_json()
        collection_name = data.get("collection_name")
        emoji = data.get("emoji", "üôÇ")
        description = data.get("description", "")
        embedding_provider_id = data.get("embedding_provider_id", None)
        logger.info(f"Êî∂Âà∞ÂàõÂª∫Áü•ËØÜÂ∫ìËØ∑Ê±Ç: {collection_name}")
        if not collection_name:
            return Response().error("Áº∫Â∞ëÈõÜÂêàÂêçÁß∞").__dict__
        if await self.vec_db.collection_exists(collection_name):
            return Response().error("ÈõÜÂêàÂ∑≤Â≠òÂú®").__dict__
        if not embedding_provider_id:
            return Response().error("Áº∫Â∞ëÂµåÂÖ•Êèê‰æõÂïÜ ID").__dict__
        try:
            # Ê∑ªÂä†ÈõÜÂêàÂÖÉÊï∞ÊçÆ
            metadata = {
                "version": 1,  # metadata ÈÖçÁΩÆÁâàÊú¨
                "emoji": emoji,
                "description": description,
                "created_at": int(time.time()),
                "file_id": f"KBDB_{str(uuid.uuid4())}",  # Êñá‰ª∂ ID
                "origin": "astrbot-webui",
                "embedding_provider_id": embedding_provider_id,  # AstrBot ÂµåÂÖ•Êèê‰æõÂïÜ ID
            }
            collection_metadata = (
                self.user_prefs_handler.user_collection_preferences.get(
                    "collection_metadata", {}
                )
            )
            collection_metadata[collection_name] = metadata
            self.user_prefs_handler.user_collection_preferences[
                "collection_metadata"
            ] = collection_metadata
            await self.user_prefs_handler.save_user_preferences()
            # ÂÖºÂÆπÊÄßÈóÆÈ¢òÔºåcreate_collection ÊñπÊ≥ïÊîæÂú®‰∏ä‰∏ÄÊ≠•‰πãÂêéÊâßË°å„ÄÇ
            await self.vec_db.create_collection(collection_name)
            return Response().ok("ÈõÜÂêàÂàõÂª∫ÊàêÂäü").__dict__
        except Exception as e:
            return Response().error(f"ÂàõÂª∫ÈõÜÂêàÂ§±Ë¥•: {str(e)}").__dict__

    async def list_collections(self):
        """
        ÂàóÂá∫ÊâÄÊúâÁü•ËØÜÂ∫ìÈõÜÂêà„ÄÇ
        :return: ÈõÜÂêàÂàóË°®
        """
        logger.info("Êî∂Âà∞ÂàóÂá∫Áü•ËØÜÂ∫ìÈõÜÂêàËØ∑Ê±Ç")
        try:
            collections = await self.vec_db.list_collections()
            result = []
            collections_metadata = (
                self.user_prefs_handler.user_collection_preferences.get(
                    "collection_metadata", {}
                )
            )
            for collection in collections:
                collection_md = collections_metadata.get(collection, {})
                if "embedding_provider_id" in collection_md:
                    p_id = collection_md.get("embedding_provider_id", "")
                    provider = self.astrbot_context.get_provider_by_id(p_id)
                    if provider:
                        collection_md["_embedding_provider_config"] = (
                            provider.provider_config
                        )
                count = await self.vec_db.count_documents(collection)
                result.append(
                    {"collection_name": collection, "count": count, **collection_md}
                )
            return Response().ok(data=result).__dict__
        except Exception as e:
            return Response().error(f"Ëé∑ÂèñÈõÜÂêàÂàóË°®Â§±Ë¥•: {str(e)}").__dict__

    async def add_documents(self):
        """
        ÂêëÊåáÂÆöÈõÜÂêàÊ∑ªÂä†ÊñáÊ°£„ÄÇ
        :param collection_name: ÈõÜÂêàÂêçÁß∞
        :param documents: ÊñáÊ°£ÂàóË°®
        :return: Ê∑ªÂä†ÁªìÊûú
        """
        upload_file = (await request.files).get("file")
        collection_name = (await request.form).get("collection_name")
        chunk_size = (await request.form).get("chunk_size", None)
        overlap = (await request.form).get("chunk_overlap", None)

        logger.info(f"Êî∂Âà∞ÂêëÁü•ËØÜÂ∫ì '{collection_name}' Ê∑ªÂä†Êñá‰ª∂ÁöÑËØ∑Ê±Ç: {upload_file.filename}")

        if not upload_file or not collection_name:
            return Response().error("Áº∫Â∞ëÁü•ËØÜÂ∫ìÂêçÁß∞").__dict__
        if not await self.vec_db.collection_exists(collection_name):
            return Response().error("ÁõÆÊ†áÁü•ËØÜÂ∫ì‰∏çÂ≠òÂú®").__dict__

        task_id = f"task_{uuid.uuid4()}"
        self.tasks[task_id] = {"status": "pending", "result": None}
        logger.info(f"ÂàõÂª∫ÂºÇÊ≠•‰ªªÂä° {task_id} Áî®‰∫éÂ§ÑÁêÜÊñá‰ª∂ {upload_file.filename}")

        asyncio.create_task(
            self._process_file_asynchronously(
                task_id,
                upload_file,
                collection_name,
                chunk_size,
                overlap,
            )
        )

        return Response().ok(data={"task_id": task_id}, message="Êñá‰ª∂‰∏ä‰º†ÊàêÂäüÔºåÊ≠£Âú®ÂêéÂè∞Â§ÑÁêÜ„ÄÇ").__dict__

    async def _process_file_asynchronously(
        self, task_id, upload_file, collection_name, chunk_size_str, overlap_str
    ):
        self.tasks[task_id]["status"] = "running"
        path = None
        try:
            logger.info(f"[Task {task_id}] ÂºÄÂßãÂ§ÑÁêÜÊñá‰ª∂: {upload_file.filename}")
            chunk_size = int(chunk_size_str) if chunk_size_str else None
            overlap = int(overlap_str) if overlap_str else None
            
            temp_dir = os.path.join(get_astrbot_data_path(), "temp")
            os.makedirs(temp_dir, exist_ok=True)
            path = os.path.join(temp_dir, upload_file.filename)
            
            await upload_file.save(path)
            logger.info(f"[Task {task_id}] Êñá‰ª∂Â∑≤‰øùÂ≠òÂà∞‰∏¥Êó∂Ë∑ØÂæÑ: {path}")

            content = await self.fp.parse_file_content(path)
            if not content:
                raise ValueError("Êñá‰ª∂ÂÜÖÂÆπ‰∏∫Á©∫Êàñ‰∏çÊîØÊåÅÁöÑÊ†ºÂºè")
            logger.info(f"[Task {task_id}] Êñá‰ª∂ÂÜÖÂÆπËß£ÊûêÂÆåÊàêÔºåÈïøÂ∫¶: {len(content)}")

            chunks = self.text_splitter.split_text(
                text=content, chunk_size=chunk_size, overlap=overlap
            )
            if not chunks:
                raise Exception("ÊñáÊú¨ÂàÜÂâ≤ÂêéÊó†ÊúâÊïàÂÜÖÂÆπ (chunk ÂÜÖÂÆπ‰∏∫Á©∫)")
            logger.info(f"[Task {task_id}] ÊñáÊú¨ÂàÜÂâ≤ÂÆåÊàêÔºåÂÖ± {len(chunks)} ‰∏™Âùó")

            documents_to_add = [
                Document(
                    text_content=chunk,
                    metadata={"source": upload_file.filename, "user": "astrbot_webui"},
                )
                for chunk in chunks
            ]

            doc_ids = await self.vec_db.add_documents(collection_name, documents_to_add)
            if not doc_ids:
                raise Exception("Ê∑ªÂä†ÊñáÊ°£Âà∞Êï∞ÊçÆÂ∫ìÂ§±Ë¥•ÔºåËøîÂõûÁöÑÊñáÊ°£ ID ‰∏∫Á©∫")
            
            message = f"ÊàêÂäü‰ªéÊñá‰ª∂ '{upload_file.filename}' Ê∑ªÂä† {len(doc_ids)} Êù°Áü•ËØÜÂà∞ '{collection_name}'„ÄÇ"
            self.tasks[task_id] = {"status": "success", "result": message}
            logger.info(f"[Task {task_id}] ‰ªªÂä°ÊàêÂäü: {message}")

        except Exception as e:
            error_message = f"Â§ÑÁêÜÊñá‰ª∂Êó∂ÂèëÁîüÈîôËØØ: {str(e)}"
            self.tasks[task_id] = {"status": "failed", "result": error_message}
            logger.error(f"[Task {task_id}] ‰ªªÂä°Â§±Ë¥•: {error_message}", exc_info=True)
        finally:
            if path and os.path.exists(path):
                try:
                    os.remove(path)
                    logger.info(f"[Task {task_id}] Â∑≤Âà†Èô§‰∏¥Êó∂Êñá‰ª∂: {path}")
                except Exception as e:
                    logger.warning(f"[Task {task_id}] Âà†Èô§‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {e}")

    async def search_documents(self):
        """
        ÊêúÁ¥¢ÊåáÂÆöÈõÜÂêà‰∏≠ÁöÑÊñáÊ°£„ÄÇ
        :param collection_name: ÈõÜÂêàÂêçÁß∞
        :param query: Êü•ËØ¢Â≠óÁ¨¶‰∏≤
        :param top_k: ËøîÂõûÁªìÊûúÊï∞ÈáèÔºåÈªòËÆ§‰∏∫5
        :return: ÊêúÁ¥¢ÁªìÊûú
        """
        # ‰ªé URL ÂèÇÊï∞‰∏≠Ëé∑ÂèñÊü•ËØ¢ÂèÇÊï∞
        collection_name = request.args.get("collection_name")
        query = request.args.get("query")
        try:
            top_k = int(request.args.get("top_k", 5))
        except ValueError:
            top_k = 5
        
        logger.info(f"Êî∂Âà∞Âú®Áü•ËØÜÂ∫ì '{collection_name}' ‰∏≠ÊêúÁ¥¢ÁöÑËØ∑Ê±Ç: query='{query}', top_k={top_k}")

        # È™åËØÅÂøÖË¶ÅÂèÇÊï∞
        if not collection_name or not query:
            return Response().error("Áº∫Â∞ëÈõÜÂêàÂêçÁß∞ÊàñÊü•ËØ¢Â≠óÁ¨¶‰∏≤").__dict__

        # Ê£ÄÊü•Áü•ËØÜÂ∫ìÊòØÂê¶Â≠òÂú®
        if not await self.vec_db.collection_exists(collection_name):
            return Response().error("ÁõÆÊ†áÁü•ËØÜÂ∫ì‰∏çÂ≠òÂú®").__dict__

        try:
            # ÊâßË°åÊêúÁ¥¢
            results = await self.vec_db.search(collection_name, query, top_k)

            # Ê†ºÂºèÂåñÁªìÊûú‰ª•‰æøÂâçÁ´ØÂ±ïÁ§∫
            formatted_results = []
            for i, result in enumerate(results):
                formatted_results.append(
                    {
                        "id": result.document.id,
                        "content": result.document.text_content,
                        "metadata": result.document.metadata,
                        "score": result.score,
                    }
                )
            return Response().ok(data=formatted_results).__dict__
        except Exception as e:
            logger.error(f"ÊêúÁ¥¢Â§±Ë¥•: {str(e)}")
            return Response().error(f"ÊêúÁ¥¢Â§±Ë¥•: {str(e)}").__dict__

    async def delete_collection(self):
        """
        Âà†Èô§ÊåáÂÆöÈõÜÂêà„ÄÇ
        :param collection_name: ÈõÜÂêàÂêçÁß∞
        """
        # ‰ªé URL ÂèÇÊï∞‰∏≠Ëé∑ÂèñÊü•ËØ¢ÂèÇÊï∞
        collection_name = request.args.get("collection_name")
        logger.info(f"Êî∂Âà∞Âà†Èô§Áü•ËØÜÂ∫ìËØ∑Ê±Ç: {collection_name}")

        # Ê£ÄÊü•Áü•ËØÜÂ∫ìÊòØÂê¶Â≠òÂú®
        if not await self.vec_db.collection_exists(collection_name):
            return Response().error("ÁõÆÊ†áÁü•ËØÜÂ∫ì‰∏çÂ≠òÂú®").__dict__

        try:
            # ÊâßË°åÂà†Èô§
            await self.vec_db.delete_collection(collection_name)
            logger.info(f"Áü•ËØÜÂ∫ì '{collection_name}' Âà†Èô§ÊàêÂäü")
            return Response().ok(f"Âà†Èô§ {collection_name} ÊàêÂäü").__dict__
        except Exception as e:
            logger.error(f"Âà†Èô§Â§±Ë¥•: {str(e)}")
            return Response().error(f"Âà†Èô§Â§±Ë¥•: {str(e)}").__dict__

    async def get_task_status(self):
        """
        Ëé∑ÂèñÂºÇÊ≠•‰ªªÂä°ÁöÑÁä∂ÊÄÅ„ÄÇ
        :param task_id: ‰ªªÂä° ID
        :return: ‰ªªÂä°Áä∂ÊÄÅ
        """
        task_id = request.args.get("task_id")
        logger.debug(f"Êî∂Âà∞Ëé∑Âèñ‰ªªÂä°Áä∂ÊÄÅËØ∑Ê±Ç: {task_id}")
        if not task_id:
            return Response().error("Áº∫Â∞ë‰ªªÂä° ID").__dict__

        task_info = self.tasks.get(task_id)
        if not task_info:
            return Response().error("‰ªªÂä°‰∏çÂ≠òÂú®").__dict__

        logger.debug(f"‰ªªÂä° {task_id} Áä∂ÊÄÅ: {task_info}")
        return Response().ok(data=task_info).__dict__
